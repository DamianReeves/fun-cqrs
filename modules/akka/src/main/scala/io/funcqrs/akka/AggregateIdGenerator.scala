package io.funcqrs.akka

import io.funcqrs._

// TODO: find decent name for this
trait AggregateIdGenerator {
  self: AggregateManager =>

  def idStrategy: AggregateIdStrategy[Aggregate]

  final override def processCreation: Receive = {
    // can `any` be convert to the seed tuple (Id, Command)?
    case any if idStrategy.seedCommandReceive.isDefinedAt(any) =>
      val (id, cmd) = idStrategy.seedCommandReceive(any)
      processAggregateCommand(id, cmd)
  }
}

trait AssignedAggregateId extends AggregateIdGenerator {
  self: AggregateManager =>

  val idStrategy = new AssignedIdStrategy[Aggregate]
}

trait AutoGeneratedAggregateId extends AggregateIdGenerator  {
  autoGen: AggregateManager =>

  def generateId(): Id

  def idStrategy = new AutoGeneratedIdStrategy[Aggregate] {
    def generateId(): Id = autoGen.generateId()
  }
}


/** Provides means to manage a Singleton Aggregate.
  * A Singleton Aggregate has a fixed Id and therefore there must exist only one instance in the whole system.
  */
trait SingletonAggregateId extends AggregateIdGenerator {
  singleton: AggregateManager =>

  val id: Id

  def idStrategy = new SingletonIdStrategy[Aggregate] {
    val id: Id = singleton.id
  }
}

