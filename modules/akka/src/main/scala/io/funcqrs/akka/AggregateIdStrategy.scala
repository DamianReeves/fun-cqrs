package io.funcqrs.akka

import io.funcqrs.{Behavior, AggregateLike, AggregateAliases}

trait AggregateIdStrategy[A <: AggregateLike] extends AggregateAliases {

  type Aggregate = A

  /** Partial function to transform incoming messages to (Id, Command) tuple */
  type ReceiveCreateCommand = PartialFunction[Any, (Id, Command)]

  /** Handler method receiving the initial command to create an Aggregate */
  def seedCommandReceive: ReceiveCreateCommand

  def processAggregateCommand(aggregateId: Id, command: Command): Unit = ()
}

class AssignedIdStrategy[A <: AggregateLike] extends AggregateIdStrategy[A] {

  /** Receives (Id, Command) tuple and returns it as it. */
  def seedCommandReceive: ReceiveCreateCommand = {
    case (id: Id @unchecked, cmd: Command) => (id, cmd)
  }

  override def toString: String = "AssignedId"
}

object AssignedIdStrategy {
  def apply[A <: AggregateLike]: AssignedIdStrategy[A] = new AssignedIdStrategy[A]
}

trait AutoGeneratedIdStrategy[A <: AggregateLike] extends AggregateIdStrategy[A] {

  def generateId(): Id

  /** Receives Command and returns (Id, Command) tuple Id is generated by generatedId() methods */
  def seedCommandReceive: ReceiveCreateCommand = {
    case cmd: Command => (generateId(), cmd)
  }

  override def toString: String = "AutoGeneratedId"
}


trait SingletonIdStrategy[A <: AggregateLike] extends AggregateIdStrategy[A] {

  val id: Id

  /** Receives Command and returns (Id, Command) tuple Id is generated by generatedId() methods */
  def seedCommandReceive: ReceiveCreateCommand = {
    case cmd: Command => (id, cmd)
  }

  override def toString: String = "SingletonId"
}


trait AggregateIdGenerator {
  self: AggregateManager =>

  def idStrategy: AggregateIdStrategy[Aggregate]

  final override def processCreation: Receive = {
    // can `any` be convert to the seed tuple (Id, Command)?
    case any if idStrategy.seedCommandReceive.isDefinedAt(any) =>
      val (id, cmd) = idStrategy.seedCommandReceive(any)
      processAggregateCommand(id, cmd)
  }
}

trait AssignedAggregateId extends AggregateIdGenerator {
  self: AggregateManager =>

  val idStrategy = new AssignedIdStrategy[Aggregate]
}

trait AutoGeneratedAggregateId extends AggregateIdGenerator  {
  autoGen: AggregateManager =>

  def generateId(): Id

  def idStrategy = new AutoGeneratedIdStrategy[Aggregate] {
    def generateId(): Id = autoGen.generateId()
  }
}


/** Provides means to manage a Singleton Aggregate.
  * A Singleton Aggregate has a fixed Id and therefore there must exist only one instance in the whole system.
  */
trait SingletonAggregateId extends AggregateIdGenerator {
  singleton: AggregateManager =>

  val id: Id

  def idStrategy = new SingletonIdStrategy[Aggregate] {
    val id: Id = singleton.id
  }
}

