package io.funcqrs.akka.dsl

import _root_.akka.actor.{ActorRef, ActorSystem}
import io.funcqrs._
import io.funcqrs.akka.{AggregateServiceWithAssignedId, AggregateServiceWithManagedId, ConfigurableAggregateManager, FunCQRS}

import scala.language.implicitConversions

object FunCqrsDsl {

  def actorOf[A <: AggregateLike](config: AggregateConfig[A])(implicit funCqrs: FunCQRS): ActorRef = {
    config.name match {
      case Some(name) =>
        funCqrs.actorSystem.actorOf(ConfigurableAggregateManager.props(config.behavior, config.idStrategy), name)
      case None =>
        // let Akka pick a unique name
        funCqrs.actorSystem.actorOf(ConfigurableAggregateManager.props(config.behavior, config.idStrategy))
    }
  }

  def service[A <: AggregateLike](config: AggregateConfigWithAssignedId[A])(implicit funCqrs: FunCQRS): AggregateServiceWithAssignedId[A] = {
    new AggregateServiceWithAssignedId[A] {
      val aggregateManager = actorOf[A](config)
      def projectionMonitorActorRef: ActorRef = funCqrs.projectionMonitorActorRef
    }
  }

  def service[A <: AggregateLike](config: AggregateConfigWithManagedId[A])(implicit funCqrs: FunCQRS): AggregateServiceWithManagedId[A] = {
    new AggregateServiceWithManagedId[A] {
      val aggregateManager = actorOf[A](config)
      def projectionMonitorActorRef: ActorRef = funCqrs.projectionMonitorActorRef
    }
  }

  def aggregate[A <: AggregateLike](behavior: A#Id => Behavior[A]): AggregateConfigBuilder[A, AssignedId] = {
    AggregateConfigBuilder[A, AssignedId](None, behavior, AssignedIdStrategy[A])
  }

  trait Config

  trait AggregateConfig[A <: AggregateLike] extends Config {
    def name: Option[String]
    def behavior: (A#Id) => Behavior[A]
    def idStrategy: AggregateIdStrategy[A]
  }
  case class AggregateConfigWithAssignedId[A <: AggregateLike](name: Option[String],
                                                 behavior: (A#Id) => Behavior[A],
                                                 idStrategy: AggregateIdStrategy[A]) extends AggregateConfig[A]


  case class AggregateConfigWithManagedId[A <: AggregateLike](name: Option[String],
                                                               behavior: (A#Id) => Behavior[A],
                                                               idStrategy: AggregateIdStrategy[A]) extends AggregateConfig[A]


  trait ProjectionConfig extends Config

  trait IdStrategy

  trait AssignedId extends IdStrategy

  trait ManagedId extends IdStrategy

  case class AggregateConfigBuilder[A <: AggregateLike, S <: IdStrategy](name: Option[String],
                                                                         behavior: A#Id => Behavior[A],
                                                                         idStrategy: AggregateIdStrategy[A]) {

    def withName(_name: String): AggregateConfigBuilder[A, S] =
      this.copy(name = Option(_name))

    /** Configure Aggregate to use an [[AssignedIdStrategy]].
      *
      * Aggregate Ids are defined externally.
      */
    def withAssignedId: AggregateConfigBuilder[A, AssignedId] = {
      val strategy = AssignedIdStrategy[A]
      this.copy(idStrategy = strategy)
    }

    /** Configure Aggregate to use an [[AutoGeneratedIdStrategy]].
      * On each create command, a new unique Id will be generated.
      *
      * @param gen - a by-name parameter that should, whenever evaluated, return a unique Aggregate Id
      */
    def withAutoGeneratedId(gen: => A#Id): AggregateConfigBuilder[A, ManagedId] = {
      val strategy = new AutoGeneratedIdStrategy[A] {
        def generateId(): Id = gen
      }
      this.copy(idStrategy = strategy)
    }

    /** Configure Aggregate to use a fixed Id.
      *
      * A [[SingletonIdStrategy]] will be constructed using the passed Id
      * @param uniqueId - the fixed Id to be used for this Aggregate
      */
    def withSingletonId(uniqueId: A#Id): AggregateConfigBuilder[A, ManagedId] = {
      val strategy = new SingletonIdStrategy[A] {
        val id: Id = uniqueId
      }
      this.copy(idStrategy = strategy)
    }

  }

  object AggregateConfigBuilder {

    implicit def toAggregateConfig[A <: AggregateLike](builder: AggregateConfigBuilder[A, AssignedId]): AggregateConfigWithAssignedId[A] = {
      AggregateConfigWithAssignedId[A](
        name = builder.name,
        behavior = builder.behavior,
        idStrategy = builder.idStrategy
      )
    }

    implicit def toAggregateConfig[A <: AggregateLike](builder: AggregateConfigBuilder[A, ManagedId]): AggregateConfigWithManagedId[A] = {
      AggregateConfigWithManagedId[A](
        name = builder.name,
        behavior = builder.behavior,
        idStrategy = builder.idStrategy
      )
    }
  }

}
