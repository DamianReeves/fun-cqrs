package shop.domain.service

import akka.actor.{Props, ActorRef}
import fun.cqrs.Behavior
import fun.cqrs.akka.{AutoGeneratedAggregateId, AggregateManager}
import shop.api.AkkaModule
import com.softwaremill.macwire._
import shop.domain.model.{OrderNumber, Order}
import scala.concurrent.ExecutionContext.Implicits.global

trait OrderModule {
  this: AkkaModule =>

  val orderAggregateManager: ActorRef @@ Order.type =
    actorSystem
      .actorOf(Props[OrderAggregateManager], "orderAggregateManager")
      .taggedWith[Order.type]
}

class OrderAggregateManager extends AggregateManager with AutoGeneratedAggregateId {
  type AggregateType = Order
  def behavior(id: OrderNumber): Behavior[Order] = Order.behavior(id)
  def generateId(): OrderNumber = OrderNumber()
}