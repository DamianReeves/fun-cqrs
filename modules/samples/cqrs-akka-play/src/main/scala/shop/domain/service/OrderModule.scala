package shop.domain.service

import akka.actor.{ActorRef, Props}
import com.softwaremill.macwire._
import fun.cqrs.akka.{AggregateManager, AutoGeneratedAggregateId, ProjectionActor}
import fun.cqrs.{Tags, Behavior, Tag}
import shop.api.AkkaModule
import shop.app.LevelDbProjectionSource
import shop.domain.model.{Order, OrderNumber, OrderView}

trait OrderModule {
  this: AkkaModule =>

  val orderAggregateManager: ActorRef @@ Order.type =
    actorSystem
      .actorOf(Props[OrderAggregateManager], "orderAggregateManager")
      .taggedWith[Order.type]


  //----------------------------------------------------------------------
  // READ side wiring
  val orderViewRepo = wire[OrderViewRepo]
  val productViewRepoForOrder = wire[ProductViewRepo].taggedWith[OrderView.type]
  val customerViewRepoForOrder = wire[CustomerViewRepo].taggedWith[OrderView.type]

  val orderViewProjectionActor: ActorRef =
    actorSystem
      .actorOf(Props(classOf[OrderViewProjectionActor], wire[OrderViewProjection]), "OrderViewProjectionActor")

}

class OrderAggregateManager extends AggregateManager with AutoGeneratedAggregateId {
  type AggregateType = Order
  def behavior(id: OrderNumber): Behavior[Order] = Order.behavior(id)
  def generateId(): OrderNumber = OrderNumber()
}

class OrderViewProjectionActor(val projection: OrderViewProjection) extends ProjectionActor with LevelDbProjectionSource {
  val tag: Tag = Order.dependentView
}