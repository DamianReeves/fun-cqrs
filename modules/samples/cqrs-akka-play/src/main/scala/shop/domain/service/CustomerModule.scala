package shop.domain.service

import akka.actor.{Props, ActorRef}
import fun.cqrs.Behavior
import fun.cqrs.akka.{AssignedAggregateId, ProjectionActor, AutoGeneratedAggregateId, AggregateManager}
import shop.api.AkkaModule
import com.softwaremill.macwire._
import shop.app.LevelDbProjectionSource
import shop.domain.model.{CustomerView, CustomerId, Customer}
import scala.concurrent.ExecutionContext.Implicits.global

trait CustomerModule {
  this: AkkaModule =>

  val customerAggregateManager: ActorRef @@ Customer.type =
    actorSystem
      .actorOf(Props[CustomerAggregateManager], "CustomerAggregateManager")
      .taggedWith[Customer.type]

  //----------------------------------------------------------------------
  // READ side wiring
  val customerViewRepo = wire[CustomerViewRepo].taggedWith[CustomerView.type]
  val customerViewProjectionActor: ActorRef =
    actorSystem
      .actorOf(Props(classOf[CustomerViewProjectionActor], wire[CustomerViewProjection]), "CustomerViewProjectionActor")
}

class CustomerAggregateManager extends AggregateManager with AssignedAggregateId {

  type AggregateType = Customer

  def behavior(id: CustomerId): Behavior[Customer] = Customer.behavior(id)

}

class CustomerViewProjectionActor(val projection: CustomerViewProjection) extends ProjectionActor with LevelDbProjectionSource {

  val tag = Customer.tag
}